---
interface Props {
  forward?: boolean;
  backward?: boolean;
  maxWidth?: string;
  slideHeight?: string;
}

const direction = Astro.props.backward ? "backward" : "forward";
const styles = {
  "max-width": Astro.props.maxWidth || "48rem",
  "slide-height": Astro.props.slideHeight || "10rem",
};
---

<section class="embla">
  <div class="embla__viewport" data-direction={direction}>
    <div class="embla__container">
      <slot />
    </div>
  </div>
</section>

<style lang="scss" define:vars={styles}>
  .embla {
    max-width: var(--max-width);
    margin: 0 auto;
    --slide-spacing: 0px;
    user-select: none;
    pointer-events: none;
  }

  .embla__viewport {
    overflow: hidden;
  }

  .embla__container {
    display: flex;
    touch-action: pan-y pinch-zoom;
    margin-left: calc(var(--slide-spacing) * -1);
  }
</style>

<script>
  import EmblaCarousel, { type EmblaCarouselType }  from "embla-carousel";
  import AutoScroll from "embla-carousel-auto-scroll";

  const carousels = new Map<HTMLElement, EmblaCarouselType>();

  document.addEventListener('astro:page-load', () => {
    const viewports = document.querySelectorAll<HTMLElement>(".embla__viewport")!;

    for (const [viewport, existingCarousel] of carousels) {
      existingCarousel.destroy();
      carousels.delete(viewport);
    }
    
    for (const viewport of viewports) {
      const newCarousel = initCarousel(viewport);
      fitSlides(viewport, newCarousel);
      carousels.set(viewport, newCarousel);
    }
  });

  function initCarousel(viewport: HTMLElement) {
    const carousel = EmblaCarousel(viewport, { loop: true, watchDrag: false }, [
      AutoScroll({
        direction: viewport.getAttribute("data-direction") as "forward" | "backward",
        stopOnInteraction: false,
        speed: 0.5,
      }),
    ]);

    carousel.on('resize', () => {
      fitSlides(viewport, carousel);
    });

    return carousel;
  }

  /** viewportの幅に十分満たないとスライドが回らないから複製してかさ増しする */
  function fitSlides(viewport: HTMLElement, carousel: EmblaCarouselType) {
    const container = carousel.rootNode().querySelector(".embla__container")!;
    const slideNodes = carousel.slideNodes();

    let currentWidth = [...slideNodes].reduce((acc, slide) => acc + slide.clientWidth, 0);

    while (currentWidth < viewport.clientWidth) {
      for (const slide of slideNodes) {
        container.appendChild(slide.cloneNode(true));
        currentWidth += slide.clientWidth;
      }
    }
  }
</script>
