---
import { Image } from "astro:assets";
import Layout from "../layouts/Layout.astro";
import Carousel from "../components/Carousel.astro";
import CarouselItem from "../components/CarouselItem.astro";
import WorkList from "../components/works/Works.astro";
import Modal from "../components/works/Modal.astro";
import DraggableWindow from "../components/DraggableWindow.astro";
import Logo3d from "../components/Logo3d.svelte";
import { queryAssets } from '../utils';
import type { ImageAsset } from '../types';

import { WORKS } from '../data';

const carouselImages = queryAssets({ showInCarousel: true }) as ImageAsset[];

// ウィンドウの最大サイズ。ビューポートが狭くなっても、このアスペクト比を保ちながら縮小する。
const DRAGGABLE_WINDOW_MAX_SIZE = { width: 500, height: 276 };
// 幅 (vw) に対するウィンドウの最大比率 (0 < n <= 1)
const DRAGGABLE_WINDOW_SCALE = 0.85;

const DRAGGABLE_WINDOW_ASPECT_RATIO =
  DRAGGABLE_WINDOW_MAX_SIZE.height / DRAGGABLE_WINDOW_MAX_SIZE.width;
const DRAGGABLE_WINDOW_WIDTH = `min(${DRAGGABLE_WINDOW_SCALE * 100}vw, ${DRAGGABLE_WINDOW_MAX_SIZE.width}px)`;
const DRAGGABLE_WINDOW_HEIGHT = `min(calc(${DRAGGABLE_WINDOW_SCALE * 100}vw * ${DRAGGABLE_WINDOW_ASPECT_RATIO}), ${DRAGGABLE_WINDOW_MAX_SIZE.height}px)`;
---

<Layout title="works">
  <p>
    REVATI Studio しろねこ、白猫。<br />
    ここらへんに各種ページのコンテンツを置く。
  </p>

  <Carousel slideHeight="6rem" maxWidth="100vw">
    {
      carouselImages.map((asset) => (
        <CarouselItem>
          {
            typeof asset.src === "string"
              ? <Image src={asset.src} alt={asset.title} inferSize />
              : <Image src={asset.src} alt={asset.title} />
          }
        </CarouselItem>
      ))
    }
  </Carousel>

  <h1>Our Works</h1>

  {
    Object.entries(WORKS).map(([category, works]) => (
      <section>
        <h2>{category}</h2>
        <WorkList items={works} />
      </section>
    ))
  }

  <DraggableWindow
    title="REVATI Studio"
    width={DRAGGABLE_WINDOW_WIDTH}
    height={DRAGGABLE_WINDOW_HEIGHT}
  >
    <Logo3d client:only="svelte" />
  </DraggableWindow>
</Layout>

<Modal />

<style lang="scss">
  h1,
  h2,
  h3 {
    text-align: center;
  }
</style>

<script>
  import type { Work_old } from "../types";

  const UPDATE_DELAY = 500;

  let dialog: HTMLDialogElement;
  let modalElms: {
    title: HTMLElement;
    image: HTMLImageElement;
    date: HTMLElement;
    authors: HTMLElement;
  };

  function handleWorkClick(this: HTMLButtonElement) {
    const imageSrc = this.getAttribute("data-image");
    const title = this.getAttribute("data-title");
    const createdAt = this.getAttribute("data-date");
    const authors = this.getAttribute("data-members");
    if (
      title !== null &&
      imageSrc !== null &&
      createdAt !== null &&
      authors !== null
    ) {
      const event: CustomEvent<Work_old> = new CustomEvent("open-work-modal", {
        detail: { imageSrc, title, createdAt, authors },
      });
      document.dispatchEvent(event);
    }
  }

  function initializeWorks() {
    document
      .querySelectorAll("button[data-image][data-title]")
      .forEach((btn) => {
        btn.removeEventListener("click", handleWorkClick);
        btn.addEventListener("click", handleWorkClick);
      });
  }

  function openModal(event: Event) {
    const { imageSrc, title, createdAt, authors } = (event as CustomEvent<Work_old>)
      .detail;
    modalElms.image.src = imageSrc;
    modalElms.image.alt = title;
    modalElms.title.textContent = title;
    modalElms.date.textContent = createdAt;
    modalElms.authors.textContent = authors;
    dialog.showModal();
    document.body.style.overflow = "hidden";
  }

  function closeModal() {
    dialog.close();
    document.body.style.overflow = "";
  }

  function initializeModal() {
    dialog = document.getElementById("work-modal-dialog")! as HTMLDialogElement;
    modalElms = {
      title: document.getElementById("work-modal-title")!,
      image: document.getElementById("work-modal-image")! as HTMLImageElement,
      date: document.getElementById("work-modal-date")!,
      authors: document.getElementById("work-modal-authors")!,
    };

    dialog.addEventListener("cancel", (e) => {
      e.preventDefault();
      closeModal();
    });

    dialog.addEventListener("click", (e) => {
      if (e.target === dialog) closeModal();
    });
  }

  function initialize() {
    initializeWorks();
    initializeModal();
  }

  // DOMが完全にロードされた後に関数を実行
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initialize);
  } else {
    initialize();
  }

  // ページの表示・非表示状態が変わったら再初期化
  document.addEventListener("visibilitychange", () => {
    if (!document.hidden) setTimeout(initialize, UPDATE_DELAY);
  });

  // 初回ページロードとすべてのナビゲーション後に再初期化
  document.addEventListener("astro:page-load", () => {
    setTimeout(initialize, UPDATE_DELAY);
  });

  document
    .getElementById("work-modal-close")!
    .addEventListener("click", closeModal);

  document.addEventListener("open-work-modal", openModal);
</script>
